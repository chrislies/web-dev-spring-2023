3-9-23	
class 7 - creating react application,useState,Hooks,Components,Props

[x] Using Hooks
	- functions starting with use are Hooks 
	- useState is a Hook
	- Hooks can only be at the top level of your components (or other Hooks)
---------------------------------------------------------------------
[x] useState

import { useState } from 'react';

export default function MyApp() {
  return (
    <div>
      <h1>Counters that update separately</h1>
      <MyButton />
      <MyButton />
    </div>
  );
}

function MyButton() {
	const [count, setCount] = useState(0); 
	//The first time button is displayed, count=0 bc 0 is passed to useState()

	function handleClick() {
		setCount(count + 1);
	}

	return (
		<button onClick={handleClick}>
			Clicked {count} times
		</button>
	);
}
//In this example, the two <MyButtons /> have their own useStates
---------------------------------------------------------------------
//To have both buttons share the same count:

import { useState } from 'react';

export default function MyApp() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <div>
      <h1>Counters that update together</h1>
      <MyButton count={count} onClick={handleClick} />
      <MyButton count={count} onClick={handleClick} />
    </div>
  );
}

function MyButton({ count, onClick }) {
  return (
    <button onClick={onClick}>
      Clicked {count} times
    </button>
  );
}
---------------------------------------------------------------------
[x] Components (UI building blocks)
	- In react, you can combine your markup, CSS, and JS into custom components, reusable UI elements for your app
	- <CustomComponent />
	- Components are regular JavaScript functions

ex) in App.js
//Here are two components: Profile and Gallery
//We should have one compenent per file though
//but this example is very simple so it is OK

function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3As.jpg"
      alt="Katherine Johnson"
    />
  );
}

//export default allows for writing: "import Gallery from './App' " in index.js
export default function Gallery() { 
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}
---------------------------------------------------------------------
[x] Passing Props to a Component
- Props are the information that you pass to a JSX tag. 
    -ex: className,src,alt,width,height

    <img
    className="avatar"
    src="https://i.imgur.com/1bX5QH6.jpg"
    alt="Lin Lanying"
    width={100}
    height={100}
    />

- Passing inputs to a component:

//destructured function
function Avatar({ person, size=100 }) { //size can be defaulted to 100
  return (
    <img
      className="avatar"
      src={getImageUrl(person)}
      alt={person.name}
      width={size}
      height={size}
    />
  );
}

//OR non-destructured function
function Avatar(props) {
  let person = props.person;
  let size = props.size;
  // ...
}

export default function Profile() {
  return (
    <Avatar
      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }} //define object
      size={100}
    />
  );
}
---------------------------------------------------------------------
[x] Ways to pass props:

function Profile({ person, size, isSepia, thickBorder }) {
  return (
    <div className="card">
      <Avatar
        person={person}
        size={size}
        isSepia={isSepia}
        thickBorder={thickBorder}
      />
    </div>
  );
}

//OR

function Profile(props) {
  return (
    <div className="card">
      <Avatar {...props} />
    </div>
  );
}
---------------------------------------------------------------------
[x] Non-static props:

export default function Clock({ color, time }) {
  return (
    <h1 style={{ color: color }}>
      {time}
    </h1>
  );
}

-Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a componentâ€™s data at any point in time, rather than only in the beginning.
-Props are immutable/unchangeable
-So, every time there is a change in the UI, there is a new prop (new object)
-Props are READ-ONLY