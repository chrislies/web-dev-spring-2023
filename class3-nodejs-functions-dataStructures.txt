2-9-23 class3

- node.js: to run javascript outside of the browser

- javascript 
- 'let' and 'const' used to declare variables
	- ex: let x = 10; 
	- ex: const y = 20;  //const can only be declared once (ex. y = 19; would produce a type error)
- variables declared inside functions are local to that function block only (not global)
- variables declared outside of functions are in the global scope
- function declaration
[x] simpler method:
	function square(x) {
		return x * x;
	}
[x] arrow method: (takes up less lines of code)
	const square = (x) => { return x * x; };
	or
	const sqaure2 = x => x * x;
- use triple equals === in place of two equals ==
== is the equality operator. It tests if two values are equal, after converting both values to a common type if needed. For example: 5 == "5" is true because both values are equal when converted to the same type (i.e., the number 5 and the string "5").

=== is the strict equality operator. It tests if two values are equal, without converting both values to a common type. For example: 5 === "5" is false because the values are not equal without type conversion (i.e., the number 5 is not equal to the string "5").
---------------------------------------------------------
to use nodejs
[x] nano example.js	// create a js file
[x] node example.js	// run the js file
---------------------------------------------------------
Data Structures:

[x] delete operator:
let anObject = {left: 1, right: 2};
console.log(anObject.left);
// → 1
delete anObject.left;
console.log(anObject.left);
// → undefined
console.log("left" in anObject);
// → false
console.log("right" in anObject);
// → true
---------------------------------------------------------
[x] find out what properties an object has
console.log(Object.keys({x: 0, y: 0, z: 2}));
// → ["x", "y", "z"]
---------------------------------------------------------
[x] Object.assign function copies all properties from one object into another.
let objectA = {a: 1, b: 2};
Object.assign(objectA, {b: 3, c: 4});
console.log(objectA);
// → {a: 1, b: 3, c: 4}
---------------------------------------------------------
[x] Arrays
let journal = [
  {events: ["work", "touched tree", "pizza",
            "running", "television"],
   squirrel: false},
  {events: ["work", "ice cream", "cauliflower",
            "lasagna", "touched tree", "brushed teeth"],
   squirrel: false},
  {events: ["weekend", "cycling", "break", "peanuts",
            "beer"],
   squirrel: true}
];

for (let i=0; i<journal.length; i++) {
	//each object is journal[i]
	let eventsArray = journal[i].events;
	console.log(`contents for entry ${i}`);
	for (let j=0; j<eventsArray.length; j++) {
		console.log(eventsArray[j];
	}
}
---------------------------------------------------------
